# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['drive_setup', 'clone_new_repo', 'change_dir', 'home_dir']

# Cell
import os
from google.colab import drive
from nbdev import *
from nbdev.showdoc import *
from pathlib import Path
from getpass import getpass
import urllib

# Cell
def drive_setup():
  "Connect the current Colab instance to the users Google Drive"
  drive.mount('/content/drive', force_remount=True)

# Cell
class _StopExecution(Exception):
    def _render_traceback_(self):
        pass

# Cell
def _check_input(type, input):
  "Utility function to check the users input and exit cell if invalid"
  if input == "":
    print(f'Error: {type} required ')
    raise _StopExecution
  else: return input

def _get_dest_dir():
  "Allows the user to input the destination folder for the cloned repo and checks it exists"

  # set home directory
  home_dir = "/content/drive/My Drive"

  dir = input(f'Destination directory {home_dir}/')
  dest_dir = home_dir+"/"+dir
  dir_exists = os.path.isdir(dest_dir)
  if dir_exists:
    return dest_dir
  else:
    print(f"Error: Destination directory {dest_dir} does not exist\n")
    raise _StopExecution

def _get_repo(dir):
  "Allows the user to enter the repo name and checks it doesn't already exist"
  repo = _check_input('repository name', input('Repo name: '))
  repo_path = dir+"/"+repo
  path_exists = os.path.exists(repo_path)
  if path_exists:
    print(f"Error: file/folder {repo} already exists at destination {dir}. Function can only be used to create new repo\n")
    raise _StopExecution
  else:
     return repo

# Cell
def clone_new_repo():
  "Clone repo from github to google drive and configure"

  print('  Important Information:\n\
  nbd_dev does not store user details but users Github username and password are stored in the cloned\n\
  repository on Google Drive to allow automatic authentication from Colaboratory notebooks.Take care\n\
  therefore, NOT to share the cloned repository with anyone as this risks exposing user credentials.\n')

  dest_dir = _get_dest_dir()
  repo = _get_repo(dest_dir)
  user = _check_input('Username', input('Username: '))
  user_email = _check_input('User email', input('User email: '))
  password = getpass('Password: ')

  # converts password into url format
  password = urllib.parse.quote(password)

  confirm = input('Confirm and clone y/n?')
  if confirm == 'y':
    change_dir(dest_dir)
    cmd_string = 'git clone https://{0}:{1}@github.com/{0}/{2}.git'.format(user, password, repo)
    try:
      os.system(cmd_string)
    except:
      print('Error: Clone failed. Please review entries and try again. User details purged')
    finally:
      # purge password containing variables
      cmd_string, password = None, None

    if os.path.exists(dest_dir+"/"+repo):
      print(f'{repo} successfully cloned into {dest_dir}')
    else:
      print('Error: Clone failed. Please review entries and try again. User details purged')
      raise _StopExecution

    # save user email and username into local git repo to identify user for git commands
    try:
      os.system('git config user.name user')
      os.system('git config user.email user_email')
    except exception as e:
     print('Git configuration failed. Please manually configure the local repo with username and email')
     print(e)

    # Install git hooks to clean up notebook metadata for smooth github integration
    try:
      os.system('nbdev_install_git_hooks')
      print('nbdev git hooks successfully installed')
    except exception as e:
      print('Failed to install git hooks. Try manually installing with !nbdev_install_git_hooks')
      print(e)

  else:
    cmd_string, password = None, None
    print('Clone cancelled\n')
    raise _StopExecution


# Cell
def change_dir(path):
  "Change directory to 'path'"
  p = Path(path)
  os.chdir(p)

# Cell
def home_dir():
  "Change directory to the users home directory on Google Drive '/content/drive/My Drive'"
  home_dir = "/content/drive/My Drive"
  p = Path(home_dir)
  os.chdir(p)