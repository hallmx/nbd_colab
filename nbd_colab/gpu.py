# AUTOGENERATED! DO NOT EDIT! File to edit: 04_gpu.ipynb (unless otherwise specified).

__all__ = ['versions', 'show_ram_usage', 'purge_mem', 'show_df_mem_usage', 'reduce_df_mem_usage']

# Cell
def versions():
  "Checks if GPU enabled and if so displays device details with cuda, pytorch, fastai versions"
  print("GPU: ", torch.cuda.is_available())
  if torch.cuda.is_available() == True:
    print("Device = ", torch.device(torch.cuda.current_device()))
    print("Cuda version - ", torch.version.cuda)
    print("cuDNN version - ", torch.backends.cudnn.version())
    print("PyTorch version - ", torch.__version__)
    print("fastai version", fastai.__version__)

# Cell
def show_ram_usage():
  import psutil
  "Check overall RAM usage"
  pu_mem = psutil.Process(os.getpid())
  print('RAM usage: {} GB'.format(pu_mem_,memory_info([0]/1024 ** 3)))

# Cell
def purge_mem(vars=None, mem=True):
  "Delete `vars` and recycle CPU memory. Show new RAM if `mem=True`"
  for var in vars:
    del var
  gc.collect()
  if mem: show_ram_usage()

# Cell
def show_df_mem_usage(df):
  "Check dataframe `df` memory use"
  print('Shape: ', df.shape)
  print('Total Mem usage: ', df.memory_usage().sum())
  df.memory_usage()

# Cell
def reduce_df_mem_usage(df, verbose=True):
  "Reduce size of dataframe `df` columns to minimise memory usage"
  numerics = ['int16', 'int32', 'int64', 'float64']
  start_mem = df.memory_usage().sum() / 1024**2
  for col in df.columns:
      col_type = df[col].dtypes
      if col_type in numerics:
          c_min = df[col].min()
          c_max = df[col].max()
          if str(col_type)[:3] == 'int':
              if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:
                  df[col] = df[col].astype(np.int8)
              elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:
                  df[col] = df[col].astype(np.int16)
              elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:
                  df[col] = df[col].astype(np.int32)
              elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:
                  df[col] = df[col].astype(np.int64)
          else:
              if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:
                  df[col] = df[col].astype(np.float16)
              elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:
                  df[col] = df[col].astype(np.float32)
              else:
                  df[col] = df[col].astype(np.float64)
  end_mem = df.memory_usage().sum() / 1024**2
  if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) / start_mem))
  return df